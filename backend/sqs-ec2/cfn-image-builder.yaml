AWSTemplateFormatVersion: 2010-09-09
Description: EC2 Image Builder

Parameters:
  gitHubRepo:
    Type: String
    Default: https://github.com/UBC-CIC/COVID19-L3-Net-APP
  gitHubBranch:
    Default: master
    Type: String 
  Ec2KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  amazonLinuxAmi:
    Type: String 
    # Deep Learning AMI (Amazon Linux 2) 

Resources:
  ImageBuilderLogBucket:
    Type: AWS::S3::Bucket

  InstanceRole:
    Type: AWS::IAM::Role
    Metadata:
      Comment: Role to be used by instance during image build.
    Properties:
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilder
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: "2012-10-17"
      Path: /executionServiceEC2Role/

  InstanceRoleLoggingPolicy:
    Type: AWS::IAM::Policy
    Metadata:
      Comment: Allows the instance to save log files to an S3 bucket.
    Properties:
      PolicyName: ImageBuilderLogBucketPolicy
      Roles:
        - Ref: InstanceRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Resource:
              - Fn::Sub:
                  - arn:${AWS::Partition}:s3:::${BUCKET}/*
                  - BUCKET:
                      Ref: ImageBuilderLogBucket
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /executionServiceEC2Role/
      Roles:
        - Ref: InstanceRole

  ContainerBuildComponent:
    Type: 'AWS::ImageBuilder::Component'
    Properties:
      Name: !Sub 'Covid19Model-${gitHubBranch}'
      Platform: 'Linux'
      Version: "1.0.0"
      Description: 'Covid19 Model Load'
      ChangeDescription: 'change-description'
      # Require one of 'Data' or 'Uri' for Component template
      Data: !Sub |
        name: Covid19Model - InlineData
        description: Covid19 Model Load
        schemaVersion: 1.0

        phases:
          - name: initialization
            steps:
              - name: GitHubClone
                action: ExecuteBash
                inputs:
                  commands:
                    - yum -y install git awslogs jq imagemagick            
                    - cd /tmp
                    - sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm                      
                    - sudo systemctl start amazon-ssm-agent || echo "Failed in starting SSM"
                    - cd /root && git clone ${gitHub}.git covid-19-app-${gitBranch} --branch ${gitBranch}

          - name: build
            steps:
              - name: ImageName
                action: ExecuteBash
                inputs:
                  commands:
                    - |
                      if [[ "${gitBranch}" == "master" ]]; then
                        echo "covid-19-api:latest"
                      else
                        echo "covid-19-api:${gitBranch}"
                      fi

              - name: ModelBuild
                action: ExecuteBash
                inputs:
                  commands:
                    - cd /root/covid-19-app-${gitBranch}/backend/sqs-ec2
                    - 'CONTAINER_IMAGE={{ build.ImageName.outputs.stdout }}'
                    - ACCOUNT="$(aws sts get-caller-identity --query Account --output text)"
                    - REGION="$(curl -s http://169.254.169.254/latest/meta-data/local-hostname | cut -d . -f 2)"
                    - REGISTRY="${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com"
                    - aws configure set default.region $REGION
                    - cp -av ./spot-instance-interruption-notice-handler.service /etc/systemd/system/spot-instance-interruption-notice-handler.service
                    - cp -av ./worker.service /etc/systemd/system/worker.service
                    - cp -av ./spot-instance-interruption-notice-handler.sh /usr/local/bin/
                    - cp -av ./worker.sh /usr/local/bin
                    - chmod +x /usr/local/bin/spot-instance-interruption-notice-handler.sh
                    - chmod +x /usr/local/bin/worker.sh           
                    - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REGISTRY
                    - docker pull ${REGISTRY}/${CONTAINER_IMAGE}
                    - docker tag ${REGISTRY}/${CONTAINER_IMAGE} ${CONTAINER_IMAGE}


  ImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: UbuntuServer20NET5
      Version: 0.0.1
      # ${AWS::Partition} returns the partition where you are running the CloudFormation template. For standard AWS regions, the
      # partition is aws. For resources elsewhere, the partition is aws-partitionname. For example, China (Beijing and Ningxia)
      # regions use aws-cn and AWS GovCloud (US) regions are aws-us-gov.
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html
      ParentImage:
        Fn::Sub: arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:image/ubuntu-server-20-lts-x86/x.x.x
      Components:
        - ComponentArn:
            Ref: InstallNET5Component

  ImageRecipe:
    Type: 'AWS::ImageBuilder::ImageRecipe'
    Properties:
      Name: !Sub 'CovidRecipe-${gitHubBranch}'
      Version: '1.0.0'
      ParentImage: !Ref amazonLinuxAmi
      Description: 'Deep Learning AMI (Amazon Linux 2)'
      Components:
        - ComponentArn: !Ref ContainerBuildComponent

  InfrastructureConfiguration:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      Name: UbuntuServer20-Image-Infrastructure-Configuration
      InstanceProfileName:
        Ref: InstanceProfile
      # Set of one or more instance types to use when building the instance. Image Builder will select a type
      # based on availability.
      InstanceTypes:
        - 'g4dn.xlarge'
        - 'g4dn.2xlarge'
      # Specify an S3 bucket and EC2 Image Builder will save logs to the bucket.
      Logging:
        S3Logs:
          S3BucketName:
            Ref: ImageBuilderLogBucket
          S3KeyPrefix: !Join [ "-", [ 'imagebuilder', !Ref "AWS::StackName" ] ]
      # If you would like to keep the instance running after a failed build, set TerminateInstanceOnFailure to false.
      TerminateInstanceOnFailure: true
      # If you do not have a default VPC or want to use a different VPC, you must specify the IDs of a subnet and one or more
      # security groups to be associated with the build instance.
      SubnetId: '{{resolve:ssm:/covid19l3/subnet1:1}}' 
      SecurityGroupIds: '{{resolve:ssm:/covid19l3/securitygroup:1}}'

  Covid19l3Image:
    Type: AWS::ImageBuilder::Image
    Properties:
      ImageRecipeArn:
        Ref: ImageRecipe
      InfrastructureConfigurationArn:
        Ref: InfrastructureConfiguration

  # Create an SSM Parameter Store entry with our resulting ImageId.
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-parameter.html
  ImageParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Image Id for Covid19l3
      Name: !Sub /covid19l3/image${gitHubBranch}
      Type: String
      Value:
        Fn::GetAtt: [UbuntuServer20WithNET5, ImageId]

